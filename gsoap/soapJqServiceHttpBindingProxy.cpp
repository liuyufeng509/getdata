/* soapJqServiceHttpBindingProxy.cpp
   Generated by gSOAP 2.8.30 for getdata.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapJqServiceHttpBindingProxy.h"

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy() : soap(SOAP_IO_DEFAULT)
{	JqServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(const JqServiceHttpBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	JqServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(soap_mode iomode) : soap(iomode)
{	JqServiceHttpBindingProxy_init(iomode, iomode);
}

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	JqServiceHttpBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

JqServiceHttpBindingProxy::JqServiceHttpBindingProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	JqServiceHttpBindingProxy_init(imode, omode);
}

JqServiceHttpBindingProxy::~JqServiceHttpBindingProxy()
{
	this->destroy();
	}

void JqServiceHttpBindingProxy::JqServiceHttpBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "SampleServices", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
JqServiceHttpBindingProxy *JqServiceHttpBindingProxy::copy()
{	JqServiceHttpBindingProxy *dup = SOAP_NEW_COPY(JqServiceHttpBindingProxy(*(struct soap*)this));
	return dup;
}
#endif

JqServiceHttpBindingProxy& JqServiceHttpBindingProxy::operator=(const JqServiceHttpBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void JqServiceHttpBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void JqServiceHttpBindingProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	JqServiceHttpBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void JqServiceHttpBindingProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *JqServiceHttpBindingProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *JqServiceHttpBindingProxy::soap_fault()
{	return this->fault;
}

const char *JqServiceHttpBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *JqServiceHttpBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int JqServiceHttpBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int JqServiceHttpBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void JqServiceHttpBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void JqServiceHttpBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *JqServiceHttpBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int JqServiceHttpBindingProxy::getData(const char *endpoint, const char *soap_action, ns1__getData *ns1__getData_, ns1__getDataResponse &ns1__getDataResponse_)
{	struct soap *soap = this;
	struct __ns1__getData soap_tmp___ns1__getData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8000/";
	if (soap_action == NULL)
		soap_action = "getData";
	soap_tmp___ns1__getData.ns1__getData_ = ns1__getData_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getData(soap, &soap_tmp___ns1__getData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getData(soap, &soap_tmp___ns1__getData, "-ns1:getData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getData(soap, &soap_tmp___ns1__getData, "-ns1:getData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__getDataResponse_)
		return soap_closesock(soap);
	ns1__getDataResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDataResponse_.soap_get(soap, "ns1:getDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
